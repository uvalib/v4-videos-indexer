#!/bin/bash

SCRIPTDIR=$( (cd -P $(dirname $0) && pwd) )
corename=swank
DATADIR=${SCRIPTDIR}/data
BASEDIR=$( dirname $SCRIPTDIR )
COMMONDIR=${BASEDIR}/common

# load the shared bash functions log, vlog and Verbose
. $COMMONDIR/outputfuncs.bash 

marc4j_jar=$( find_newest_file_matching_pattern_under_directory $COMMONDIR "marc4j*.jar" )

verbose=
force=
test=
index=staging:production
while getopts :vfti: opt
 do
      case $opt in
          v) verbose=-v;;
          t) test=-t;;
          f) force=-f;;
          i) index=$OPTARG
      esac
done
shift $((OPTIND-1))

DATE=`date +%Y%m%d`
YEAR=`date +%Y`

mkdir -p $DATADIR/incoming
mkdir -p $DATADIR/screenshots
mkdir -p $DATADIR/combined
mkdir -p $DATADIR/tmp
if [[ ! -d $COMMONDIR/node_modules ]] ; then
    Echo "Node modules not installed in common directory.  Exiting"
    exit 1
fi

if [[ ! -d $SCRIPTDIR/node_modules || ! -L $SCRIPTDIR/node_modules ]] ; then
   ln -s $COMMONDIR/node_modules $SCRIPTDIR/node_modules
fi

if [[ ! -f $COMMONDIR/package-lock.json ]] ; then
    Echo "package-lock not installed in common directory.  Exiting"
    exit 1
fi

if [[ ! -f $SCRIPTDIR/package-lock.json || ! -L $SCRIPTDIR/package-lock.json ]] ; then
   ln -s $COMMONDIR/package-lock.json $SCRIPTDIR/package-lock.json
fi

if [[ "$test" == "-t" ]] ; then testpat="*"; else testpat=""; fi;

Verbose "Fetching records from SWANK website"
$SCRIPTDIR/getswankrecordsviapuppeteer $verbose $force
if [[ "$?" != "0" ]]; then
    Echo "Script to fetch records returned error, exiting"
    exit 1
fi

combined_dir=$DATADIR/combined
latest_mrc_file=$( find_newest_file_matching_pattern_under_directory $DATADIR/incoming "*.mrc" )
latest_csv_file=$( find_newest_file_matching_pattern_under_directory $DATADIR/incoming "*.csv" )

if [[ ! -s "$latest_mrc_file" ]] ; then
    touch -d "A year ago" "$latest_mrc_file"
fi

if [[ "$force" == "-f" ]] ; then
    Verbose "Forcing a rebuild of all records" 
    touch -d "A year ago" "$latest_file"
fi

if [[ "$latest_mrc_file" != "" && -s "$latest_mrc_file" ]] ; then
    Verbose "New file downloaded: $latest_mrc_file"

    Verbose "making .TSV file from .CSV file"
    # process the downloaded csv file to create a tab separated file to use in shadowing records for which the license has expired
    latest_ids_file=`echo $latest_csv_file | sed -e 's/.csv$/.ids/'`
    latest_tsv_file=`echo $latest_csv_file | sed -e 's/.csv$/.tsv/'`
    latest_dates_file=`echo $latest_csv_file | sed -e 's/.csv$/.date/'`
    egrep -v '^Title'  $latest_csv_file | cut -d ',' -f 5 | sed -e 's#.*/en/##' -e 's/small.jpg.*//' -e 's/[-_][0-9]*//' > $latest_ids_file
    egrep -v '^Title' $latest_csv_file | cut -d ',' -f 1,7 | tr ',' '\t' | paste $latest_ids_file - > $latest_tsv_file
    cat $latest_tsv_file | cut -f 1,3 | tr '/' '\t' | awk '{printf "%s|%4d%02d%02d\n", $1, $4, $2, $3 }' > $latest_dates_file

    for line in `cat $SCRIPTDIR/cores_to_process`
    do
        solrname=`echo $line| cut -d '|' -f1`
        update_bucket=`echo $line| cut -d '|' -f2 | sed -e "s/YEAR/$YEAR/"`
        delete_bucket=`echo $line| cut -d '|' -f3 | sed -e "s/YEAR/$YEAR/"`
        solrurl=`echo $line| cut -d '|' -f4`

        if [[ "$index" =~ $solrname ]]; then
            Verbose "Checking for records to delete from Solr"
            # process the tab separated file and the set of marc records to create a set of records that contains the license expiration date 
            # for use in Virgo 4 
            previous_combined_file=$( find_newest_file_matching_pattern_under_directory $DATADIR/combined "*_${solrname}${testpat}.mrc" )
            latest_combined_file=`echo $latest_mrc_file | sed -e 's/incoming/combined/' -e "s/.mrc/_${solrname}${test}.mrc/"`
            #echo "java -cp \"$marc4j_jar:$COMMONDIR/fix_boundwith.jar\" AddFieldToRecord -c utf8 -f 988 -s a  $latest_mrc_file $latest_dates_file > $latest_combined_file"
            java -cp "$marc4j_jar:$COMMONDIR/fix_boundwith.jar" AddFieldToRecord -c utf8 -f 988 -s a  $latest_mrc_file $latest_dates_file > $latest_combined_file
            cat $latest_combined_file | 
                $COMMONDIR/getrecord -id | sort -n |  sed -e 's/^/swank_/' > $combined_dir/swank_ids_in_dump.ids

            curl -s "${solrurl}/select?fl=id&q=data_source_f:swank&defType=lucene&rows=1000" | 
                egrep '"id":' | sed -e 's/.*:"//' -e 's/".*$//' | sort -n > $combined_dir/swank_ids_in_${solrname}_solr.ids

            diff $combined_dir/swank_ids_in_dump.ids $combined_dir/swank_ids_in_${solrname}_solr.ids | 
                egrep '>' | sed -e 's/> //' > $combined_dir/swank_ids_to_delete_from_${solrname}_solr.ids

            if [[ "$test" != "-t" ]] ; then 
                if [[ -s $combined_dir/swank_ids_to_delete_from_${solrname}_solr.ids ]] ; then
                    Verbose "Delete older records from Solr"
                    aws s3 cp  $combined_dir/swank_ids_to_delete_from_${solrname}_solr.ids  ${delete_bucket}/swank_ids_to_delete_from_${solrname}_solr.ids  2>&1 | vlog "      "
                fi

                if [[ "$previous_combined_file" == "" ]]; then previous_combined_file="/dev/null"; fi
                Verbose "Calling   cmp -s $latest_combined_file $previous_combined_file "
                cmp -s "$latest_combined_file" "$previous_combined_file"
                if [[ "$?" != "0" ]] ; then
                    Verbose "Uploading to S3 bucket for Virgo4"
                    aws s3 cp  $latest_combined_file  ${update_bucket}/marc_record_export_edited_${DATE}.mrc 2>&1 | vlog "      "
                fi
            else 
                if [[ -s $combined_dir/swank_ids_to_delete_from_${solrname}_solr.ids ]] ; then
                    Echo "would upload $combined_dir/swank_ids_to_delete_from_${solrname}_solr.ids to ${delete_bucket}"
                fi
                if [[ "$previous_combined_file" == "" ]]; then previous_combined_file="/dev/null"; fi
                Verbose "Calling   cmp -s $latest_combined_file $previous_combined_file "
                cmp -s "$latest_combined_file" "$previous_combined_file"
                if [[ "$?" != "0" ]] ; then
                    Echo "would upload $latest_combined_file to ${update_bucket}"
                fi
            fi
        fi
    done
else
    Verbose "No new file in dropbox, so nothing to do."
fi
